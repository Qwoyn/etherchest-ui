import React, {useContext, useState, useEffect} from "react";
import {withRouter} from "react-router-dom";
import { Redirect } from 'react-router';
import { HashkingsAPI, seedNames } from "../service/HashkingsAPI";
import {StateContext} from "../App";
import PlantModal from "./PlantModal";
import WaterModal from "./WaterModal";
import HarvestModal from "./HarvestModal";
import Inventory from "./Inventory";
import ExpansionPanel from '@material-ui/core/ExpansionPanel';
import ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';
import ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';
import { DataTable } from "primereact/datatable";
import { ProgressBar } from "primereact/progressbar";
import { Column } from "primereact/column";
import { createMuiTheme, makeStyles, withStyles } from '@material-ui/core/styles';
import Button from '@material-ui/core/Button';
import Snackbar from '@material-ui/core/Snackbar';
import Tooltip from '@material-ui/core/Tooltip';
import Zoom from '@material-ui/core/Zoom';
import SvgIcon from '@material-ui/core/SvgIcon';
import { red } from '@material-ui/core/colors';
import CardContent from '@material-ui/core/CardContent';
import CardMedia from '@material-ui/core/CardMedia';
import Fab from '@material-ui/core/Fab';
import Card from '@material-ui/core/Card';
import Typography from '@material-ui/core/Typography';
import { ThemeProvider } from '@material-ui/styles';
import Grid from '@material-ui/core/Grid';
import Paper from '@material-ui/core/Paper';
import Table from '@material-ui/core/Table';
import TableBody from '@material-ui/core/TableBody';
import TableCell from '@material-ui/core/TableCell';
import TableHead from '@material-ui/core/TableHead';
import TableRow from '@material-ui/core/TableRow';
import ExpandMoreIcon from '@material-ui/icons/ExpandMore';
import GiftSeed from "./GiftSeed";
import Divider from '@material-ui/core/Divider';
import CustomizedDialogs from './DialogPage';

function WaterIcon(props) {
  return (
    <SvgIcon viewBox="0 0 64 64" htmlColor="#2C4770" {...props}>
      <path d="m33.586 32-2-2h-10.666c.047.328.08.66.08 1s-.033.672-.08 1z"/>
      <path d="m15 26.101v9.799c2.279-.465 4-2.484 4-4.899s-1.721-4.436-4-4.9z"/>
      <path d="m29.586 28-1.586-1.586-1.586 1.586z"/>
      <path d="m31.979 14.808h22.042v16.385h-22.042z" transform="matrix(.707 -.707 .707 .707 -3.669 37.142)"/>
      <path d="m40.479 29.671h22.042v3.657h-22.042z" transform="matrix(.707 -.707 .707 .707 -7.19 45.642)"/>
      <path d="m23.479 12.671h22.042v3.657h-22.042z" transform="matrix(.707 -.707 .707 .707 -.148 28.642)"/>
      <path d="m56.586 13c.267-.268.414-.622.414-1s-.147-.732-.415-1l-7.585-7.586c-.534-.535-1.466-.535-2 0l-2.586 2.586 9.586 9.586z"/>
      <path d="m14 55 .658-1.317c.883-1.764 1.342-3.71 1.342-5.683s-.459-3.919-1.342-5.683l-.658-1.317-.658 1.317c-.883 1.764-1.342 3.71-1.342 5.683s.459 3.919 1.342 5.683z"/>
      <path d="m23.686 47.256.314-1.256-1.256.314c-1.796.449-3.435 1.377-4.744 2.686s-2.237 2.948-2.686 4.744l-.314 1.256 1.256-.314c.405-.101.8-.235 1.187-.384-.114.045-.228.09-.338.145l-3.105 1.553-3.106-1.553c-.11-.055-.224-.1-.338-.145.387.149.782.282 1.187.384l1.257.314-.314-1.256c-.449-1.796-1.377-3.435-2.686-4.744s-2.948-2.237-4.744-2.686l-1.256-.314.314 1.256c.449 1.796 1.377 3.435 2.686 4.744.964.964 2.111 1.718 3.365 2.23-.439-.149-.899-.23-1.365-.23-.658 0-1.306.153-1.894.447l-3.106 1.553 3.106 1.553c.588.294 1.236.447 1.894.447s1.306-.153 1.894-.447l2.106-1.053v4.5h-4v2h10v-2h-4v-4.5l2.106 1.053c.588.294 1.236.447 1.894.447s1.306-.153 1.894-.447l3.106-1.553-3.106-1.553c-.588-.294-1.236-.447-1.894-.447-.466 0-.926.081-1.365.23 1.254-.512 2.4-1.266 3.365-2.23 1.309-1.309 2.237-2.948 2.686-4.744z"/>
      <path d="m10 22c0-1.281-.509-2.509-1.414-3.414-1.656-1.656-2.586-3.901-2.586-6.243 0 2.341-.93 4.587-2.586 6.243-.905.905-1.414 2.133-1.414 3.414 0 2.209 1.791 4 4 4s4-1.791 4-4z"/>
      <path d="m16 16c2.209 0 4-1.791 4-4 0-1.281-.509-2.509-1.414-3.414-1.656-1.656-2.586-3.901-2.586-6.243 0 2.341-.93 4.587-2.586 6.243-.905.905-1.414 2.133-1.414 3.414 0 2.209 1.791 4 4 4z"/>
      <path d="m34.586 43.586c-1.656-1.656-2.586-3.901-2.586-6.243 0 2.341-.93 4.587-2.586 6.243-.905.905-1.414 2.133-1.414 3.414 0 2.209 1.791 4 4 4s4-1.791 4-4c0-1.281-.509-2.509-1.414-3.414z"/>
    </SvgIcon>
  );
}

function GerminateIcon(props) {
  return (
    <SvgIcon viewBox="0 0 64 64" htmlColor="#A3711A" {...props}>
      <path d="m30 51h33v2h-33z"/>
      <path d="m1 51h3v2h-3z"/>
      <path d="m17 63c-7.72 0-14-6.28-14-14h2c0 6.617 5.383 12 12 12s12-5.383 12-12h2c0 7.72-6.28 14-14 14z"/>
      <path d="m20 59c-2.243 0-4-1.317-4-3s1.757-3 4-3 4 1.317 4 3-1.757 3-4 3zm0-4c-1.221 0-2 .592-2 1s.779 1 2 1 2-.592 2-1-.779-1-2-1z"/>
      <path d="m11 57c-1.682 0-3-1.757-3-4s1.318-4 3-4 3 1.757 3 4-1.318 4-3 4zm0-6c-.408 0-1 .779-1 2s.592 2 1 2 1-.779 1-2-.592-2-1-2z"/>
      <path d="m21 51c-1.682 0-3-1.757-3-4s1.318-4 3-4 3 1.757 3 4-1.318 4-3 4zm0-6c-.408 0-1 .779-1 2s.592 2 1 2 1-.779 1-2-.592-2-1-2z"/>
      <path d="m31 46c-3.364 0-6-1.757-6-4s2.636-4 6-4 6 1.757 6 4-2.636 4-6 4zm0-6c-2.29 0-4 1.056-4 2s1.71 2 4 2 4-1.056 4-2-1.71-2-4-2z"/>
      <path d="m41 44c-3.364 0-6-1.757-6-4s2.636-4 6-4 6 1.757 6 4-2.636 4-6 4zm0-6c-2.29 0-4 1.056-4 2s1.71 2 4 2 4-1.056 4-2-1.71-2-4-2z"/>
      <path d="m35 40h2v12h-2z"/>
      <path d="m18 15h-13c-2.206 0-4-1.794-4-4s1.794-4 4-4c0-3.309 2.691-6 6-6 2.673 0 4.93 1.725 5.697 4.18.426-.119.865-.18 1.303-.18 2.757 0 5 2.243 5 5s-2.243 5-5 5zm-13-6c-1.103 0-2 .897-2 2s.897 2 2 2h13c1.654 0 3-1.346 3-3s-1.346-3-3-3c-.532 0-1.046.146-1.528.436-.295.178-.662.19-.97.033-.307-.157-.512-.462-.541-.806-.177-2.089-1.88-3.663-3.961-3.663-2.206 0-4 1.794-4 4 0 .298.045.612.142.991.094.368-.028.759-.317 1.007s-.692.312-1.043.161c-.249-.105-.512-.159-.782-.159z"/>
      <path d="m42 15h-13c-2.206 0-4-1.794-4-4s1.794-4 4-4c0-3.309 2.691-6 6-6 2.673 0 4.93 1.725 5.697 4.18.426-.119.865-.18 1.303-.18 2.757 0 5 2.243 5 5s-2.243 5-5 5zm-13-6c-1.103 0-2 .897-2 2s.897 2 2 2h13c1.654 0 3-1.346 3-3s-1.346-3-3-3c-.532 0-1.046.146-1.528.436-.296.178-.663.19-.97.033s-.512-.462-.541-.806c-.177-2.089-1.88-3.663-3.961-3.663-2.206 0-4 1.794-4 4 0 .298.045.612.142.991.094.368-.028.759-.317 1.007-.288.248-.692.312-1.043.161-.249-.105-.512-.159-.782-.159z"/>
      <path d="m54.256 27.686-1.256.314.314-1.256c.449-1.796 1.377-3.435 2.686-4.744 1.309-1.309 2.948-2.237 4.744-2.686l1.256-.314-.314 1.256c-.449 1.796-1.377 3.435-2.686 4.744-1.309 1.309-2.948 2.237-4.744 2.686z" fill="#669e4f"/>
      <path d="m49.744 27.686 1.256.314-.314-1.256c-.449-1.796-1.377-3.435-2.686-4.744-1.309-1.309-2.948-2.237-4.744-2.686l-1.256-.314.314 1.256c.449 1.796 1.377 3.435 2.686 4.744 1.309 1.309 2.948 2.237 4.744 2.686z" fill="#669e4f "/>
      <path d="m52.658 26.683-.658 1.317-.658-1.317c-.883-1.764-1.342-3.71-1.342-5.683 0-1.973.459-3.919 1.342-5.683l.658-1.317.658 1.317c.883 1.764 1.342 3.71 1.342 5.683 0 1.973-.459 3.919-1.342 5.683z" fill="#78b75b"/>
      <path d="m55.106 30.553-3.106-1.553 3.106-1.553c.588-.294 1.236-.447 1.894-.447.658 0 1.306.153 1.894.447l3.106 1.553-3.106 1.553c-.588.294-1.236.447-1.894.447-.658 0-1.306-.153-1.894-.447z" fill="#78b75b"/>
      <path d="m45.106 30.553-3.106-1.553 3.106-1.553c.588-.294 1.236-.447 1.894-.447.658 0 1.306.153 1.894.447l3.106 1.553-3.106 1.553c-.588.294-1.236.447-1.894.447-.658 0-1.306-.153-1.894-.447z" fill="#78b75b"/>
      <path d="m52 29c-.379 0-.725-.214-.895-.553l-.658-1.316c-.947-1.894-1.447-4.014-1.447-6.131s.5-4.237 1.447-6.131l.658-1.316c.339-.678 1.45-.678 1.789 0l.658 1.316c.948 1.894 1.448 4.014 1.448 6.131s-.5 4.237-1.447 6.131l-.658 1.316c-.17.339-.516.553-.895.553zm0-12.734c-.656 1.486-1 3.111-1 4.734s.344 3.248 1 4.734c.656-1.486 1-3.111 1-4.734s-.344-3.248-1-4.734z"/>
      <path d="m57 32c-.808 0-1.618-.191-2.341-.553l-3.105-1.553c-.34-.169-.554-.515-.554-.894s.214-.725.553-.895l3.105-1.553c1.448-.723 3.236-.723 4.683 0l3.106 1.553c.339.17.553.516.553.895s-.214.725-.553.895l-3.105 1.553c-.724.361-1.534.552-2.342.552zm-1.448-2.342c.896.447 2 .447 2.896 0l1.316-.658-1.317-.658c-.895-.447-2-.447-2.895 0l-1.316.658z"/>
      <path d="m47 32c-.808 0-1.618-.191-2.341-.553l-3.105-1.553c-.34-.169-.554-.515-.554-.894s.214-.725.553-.895l3.105-1.553c1.448-.723 3.236-.723 4.683 0l3.106 1.553c.339.17.553.516.553.895s-.214.725-.553.895l-3.105 1.553c-.724.361-1.534.552-2.342.552zm-1.448-2.342c.896.447 2 .447 2.896 0l1.316-.658-1.317-.658c-.895-.447-2-.447-2.895 0l-1.316.658z"/>
      <path d="m53 29c-.262 0-.517-.103-.707-.293-.249-.248-.348-.608-.263-.949l.314-1.256c.493-1.971 1.512-3.772 2.949-5.209 1.437-1.438 3.238-2.457 5.209-2.949l1.255-.313c.338-.086.701.014.95.263.249.248.348.608.263.949l-.314 1.256c-.493 1.971-1.512 3.772-2.949 5.209-1.437 1.438-3.238 2.457-5.208 2.948l-1.256.314c-.08.02-.162.03-.243.03zm7.614-8.614c-1.474.435-2.817 1.231-3.907 2.321-1.089 1.09-1.887 2.434-2.321 3.907 1.473-.435 2.817-1.231 3.907-2.321 1.089-1.09 1.887-2.434 2.321-3.907z"/>
      <path d="m51 29c-.081 0-.163-.01-.243-.03l-1.256-.314c-1.971-.491-3.771-1.511-5.208-2.948s-2.457-3.238-2.949-5.209l-.314-1.256c-.085-.341.015-.701.263-.949.249-.249.612-.349.95-.263l1.256.314c1.97.491 3.771 1.511 5.208 2.948s2.457 3.238 2.949 5.209l.314 1.256c.085.341-.015.701-.263.949-.19.19-.445.293-.707.293zm-7.614-8.614c.435 1.474 1.232 2.817 2.321 3.907 1.09 1.09 2.434 1.887 3.907 2.321-.435-1.474-1.232-2.817-2.321-3.907-1.09-1.09-2.434-1.887-3.907-2.321z"/>
      <path d="m51 29h2v23h-2z"/>
    </SvgIcon>
  );
  }

  function HarvestIcon(props) {
    return (
      <SvgIcon viewBox="0 0 45.702 45.703" htmlColor="#60AA9E" {...props}>
        <circle cx="31.636" cy="9.971" r="4.423"/>
      <path d="M42.694,33.609h-2.243c0.935-0.762,1.342-2.041,0.973-3.232l-4.147-13.383c-0.491-1.587-2.178-2.477-3.764-1.985
			c-0.496,0.154-0.887,0.462-1.262,0.77c-0.084,0.069-9.72,8.311-9.826,8.452l-1.157-1.647c0.173-0.024,0.388-0.075,0.664-0.167
			c0.852-0.283,1.935-0.83,1.866-1.038c-0.056-0.168-0.846-0.063-1.597,0.132c0.071-0.103,0.145-0.215,0.222-0.337
			c0.825-1.31,1.667-3.223,1.349-3.424c-0.284-0.179-1.391,1.055-2.213,2.252c-0.004-0.104-0.009-0.212-0.016-0.324
			c-0.128-2.109-0.717-4.902-1.231-4.871c-0.44,0.027-0.684,2.114-0.664,4.037c-1.462-2.085-3.654-4.436-4.155-4.096
			c-0.501,0.339,0.87,3.247,2.264,5.377c-1.779-0.731-3.808-1.279-3.996-0.88c-0.22,0.466,2.155,2.048,4.067,2.95
			c0.102,0.048,0.2,0.093,0.295,0.135c-1.416,0.32-2.973,0.89-2.913,1.221c0.068,0.371,2.158,0.297,3.68,0.018
			c0.142-0.027,0.273-0.054,0.396-0.082c-0.46,0.625-0.85,1.319-0.715,1.433c0.167,0.142,1.078-0.662,1.657-1.348
			c0.188-0.223,0.315-0.405,0.402-0.557l1.398,1.991c-0.243,0.793-0.088,1.688,0.491,2.366c0.496,0.58,1.199,0.877,1.906,0.877
			c0.577,0,1.156-0.198,1.628-0.603c1.626-1.391,6.505-5.564,6.505-5.564l2.366,7.631c0,0-5.646,2.847-5.728,2.898
			c-1.439,0.905-2.093,2.617-1.623,4.252c0.47,1.637,1.928,2.748,3.639,2.748h11.482c1.66,0,3.008-1.341,3.008-3.002
			C45.702,34.951,44.354,33.609,42.694,33.609z"/>
		  <path d="M18.775,35.281c-0.308,0-0.625,0.015-0.905,0.041v-0.556c0.12,0.058,0.27,0.115,0.477,0.173
			c0.641,0.182,1.532,0.295,1.576,0.139c0.036-0.125-0.492-0.39-1.034-0.582c0.086-0.033,0.179-0.071,0.276-0.114
			c1.05-0.461,2.363-1.284,2.25-1.54c-0.1-0.229-1.292,0.068-2.293,0.462c0.041-0.065,0.083-0.134,0.125-0.206
			c0.798-1.348,1.597-3.305,1.269-3.499c-0.281-0.167-1.297,1.013-2.085,2.2c-0.03-1.887-0.397-4.239-0.846-4.239
			c-0.448,0-0.815,2.353-0.846,4.239c-0.788-1.188-1.804-2.367-2.085-2.2c-0.329,0.194,0.471,2.151,1.269,3.499
			c0.042,0.072,0.084,0.141,0.125,0.206c-1.001-0.394-2.194-0.688-2.294-0.462c-0.112,0.256,1.2,1.079,2.25,1.54
			c0.098,0.043,0.19,0.081,0.276,0.114c-0.542,0.192-1.07,0.457-1.034,0.582c0.044,0.156,0.941,0.043,1.582-0.139
			c0.207-0.058,0.362-0.115,0.482-0.173v0.627c-1.481,0.226-2.725,0.774-3.559,1.466c-1.211-1.223-3.503-2.144-6.133-2.144
			c-0.262,0-0.531,0.009-0.786,0.026l-0.01-0.002v-1.742c0.2,0.096,0.455,0.191,0.799,0.289c1.063,0.299,2.545,0.488,2.618,0.229
			c0.059-0.209-0.814-0.647-1.713-0.966c0.144-0.057,0.297-0.119,0.459-0.189c1.743-0.765,3.919-2.13,3.733-2.555
			c-0.166-0.378-2.143,0.115-3.804,0.766c0.068-0.107,0.137-0.222,0.208-0.341c1.323-2.233,2.649-5.481,2.104-5.804
			c-0.466-0.275-2.152,1.679-3.458,3.648c-0.05-3.127-0.66-7.03-1.403-7.03c-0.744,0-1.353,3.901-1.403,7.03
			c-1.306-1.97-2.992-3.926-3.458-3.648c-0.544,0.322,0.781,3.568,2.104,5.804c0.071,0.119,0.14,0.232,0.207,0.341
			c-1.661-0.65-3.638-1.144-3.804-0.766c-0.186,0.425,1.99,1.79,3.732,2.555c0.162,0.07,0.315,0.135,0.458,0.19
			c-0.898,0.317-1.774,0.756-1.715,0.965c0.073,0.259,1.557,0.069,2.619-0.229c0.344-0.098,0.596-0.193,0.796-0.289
			c0,0,0,1.812,0.007,1.845c-3.066,0.461-5.342,2.112-5.342,3.81c0,2.002,24.327,2.002,24.327,0
			C24.892,36.652,22.153,35.281,18.775,35.281z"/>
      </SvgIcon>
    );
  }

const useStyles = makeStyles(theme => ({
  button: {
    margin: theme.spacing(1),
  },
  input: {
    display: 'none',
  },
  root: {
    '& > svg': {
      margin: theme.spacing(2),
    },
  },
  rootAgain: {
    width: '100%',
  },
  iconHover: {
    '&:hover': {
      color: "red[800]",
    },
  },
  fab: {
    margin: theme.spacing(1),
  },
  extendedIcon: {
    marginRight: theme.spacing(1),
  },
  extendPaper: {
    color: red[800]
  },
  flex: {
    flexGrow: 1,
  },
  container: {
    display: 'grid',
    gridTemplateColumns: 'repeat(12, 1fr)',
    gridGap: theme.spacing(3),
  },
  paper: {
    padding: theme.spacing(1),
    textAlign: 'center',
    color: theme.palette.text.secondary,
    whiteSpace: 'nowrap',
    marginBottom: theme.spacing(1),
    backgroundColor: "#095938",
  },
  paperBlue: {
    padding: theme.spacing(1),
    textAlign: 'center',
    color: theme.palette.text.secondary,
    whiteSpace: 'nowrap',
    marginBottom: theme.spacing(1),
    backgroundColor: "#154A4A",
  },
  paperExtended: {
    padding: theme.spacing(1),
    textAlign: 'center',
    color: theme.palette.text.secondary,
    whiteSpace: 'nowrap',
    marginBottom: theme.spacing(1),
    backgroundColor: "#532C0C",
  },
  paperBlack: {
    padding: theme.spacing(1),
    textAlign: 'center',
    color: theme.palette.text.secondary,
    whiteSpace: 'nowrap',
    marginBottom: theme.spacing(1),
    backgroundColor: "#000000"
  },
  paperBrown: {
    padding: theme.spacing(1),
    textAlign: 'center',
    color: theme.palette.text.secondary,
    whiteSpace: 'nowrap',
    marginBottom: theme.spacing(1),
    backgroundColor: "#532C0C",
  },
  paperDarkBlue: {
    padding: theme.spacing(1),
    textAlign: 'center',
    color: theme.palette.text.secondary,
    whiteSpace: 'wrap',
    marginBottom: theme.spacing(1),
    backgroundColor: "#030D22",
  },
  paperDivider: {
    padding: theme.spacing(1),
    textAlign: 'center',
    color: theme.palette.text.secondary,
    whiteSpace: 'nowrap',
    marginBottom: theme.spacing(1),
    backgroundColor: "#949494",
  },
  divider: {
    margin: theme.spacing(2, 0),
  },
  card: {
    maxWidth: 345,
    backgroundColor: "#154A4A",
  },
  table: {
    backgroundColor: "#4A8686",
  },
  media: {
    height: 140,
  },
  expansion: {
    backgroundColor: "#154A4A",
  },
  heading: {
    fontSize: theme.typography.pxToRem(15),
    fontWeight: theme.typography.fontWeightRegular,
  },
}));

const theme = createMuiTheme({
  palette: {
    primary: { 500: '#00211B' }, // custom color in hex 
  },
});

const HtmlTooltip = withStyles(theme => ({
  tooltip: {
    backgroundColor: "#000000",
    color: '#DFB17B',
    maxWidth: 220,
    fontSize: theme.typography.pxToRem(12),
    border: '1px solid #dadde9',
  },
}))(Tooltip);

export const HashkingsTemplate = () => {
    const {username} = useContext(StateContext);
    const classes = useStyles();
    const [open, setOpen] = React.useState(false);
  
    const [dashboardStats, setDashboardStats] = useState({
      gardeners: 0,
      gardens: 0,
      availableSeeds: 0,
      activeGardens: 0,
      availableGardens: 0,
      activity: [],
      delegation: 0,
      leaderboard: []
    });
  
    const [plantSeedModal, setPlantSeedModal] = useState(false);
    const [waterModal, setWaterModal] = useState(false);
    const [harvestModal, setHarvestModal] = useState(false);
    const [user, setUser] = useState({
      availableSeeds: [],
      activeGardens: [],
      availableGardens: [],
      headBlockNum: undefined
    });
  
    const [gardens, setGardens] = useState([]);
    const [loading, setLoading] = useState(false);
    const [setNoMoreHistory] = useState(false);
  
    const [headBlockNum, setHeadBlockNum] = useState(0);
  
    const hashkingsApi = new HashkingsAPI();
  
    useEffect(() => {
      if (username) {
        hashkingsApi.getUserGarden(username).then(garden => {
          const {headBlockNum, ...user} = garden;
          setUser(user);
          setHeadBlockNum(headBlockNum);
        });
      }
    }, [username]);
  
    useEffect(() => {
      hashkingsApi
        .getDashboardStats(username)
        .then(stats => {
          if (username) {
            setDashboardStats(stats);
          } else {
            setDashboardStats({
              ...dashboardStats,
              ...stats
            });
          }
        })
        .catch(e => {
          console.log(e);
        });
    }, [username]);
  
    useEffect(() => {
      if (username) {
        setLoading(true);
        hashkingsApi.getDGPO().then(dgpo => {
          const spv =
            parseFloat(dgpo.total_vesting_fund_steem.split(" ")[0]) /
            parseFloat(dgpo.total_vesting_shares.split(" ")[0]);
          Promise.all([
            hashkingsApi
              .getAccountHistory(spv, username, false)
              .then(
                ({
                  stop,
                  date
                }) => {
  
                  if (stop) {
                    setNoMoreHistory(true);
                  }
  
                  if (date) {
                  }
                }
              ),
            hashkingsApi.getUserGarden(username).then(garden => {
              setGardens(garden.activeGardens);
            })
          ]).then(() => setLoading(false));
        });
      }
    }, [username]);
  
  /*const handleClick = () => {
      setOpen(true);
    };*/
  
    const handleClose = (event, reason) => {
      if (reason === 'clickaway') {
        return;
      }
  
      setOpen(false);
    };

if (username) {
      return (
        <div className={classes.flex}>
          "hello"
        </div>
        )
  } else {
    return (
    <Redirect to='/login'/>
    );
  }
};

export default withRouter(HashkingsTemplate);